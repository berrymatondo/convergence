// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatuses {
 ACTIF
 INACTIF
 SUSPENDU
}

enum UserRoles {
 VISITOR
 CLIENT
 AGENT
 ADMIN
}

enum ContactStatuses {
 NOUVEAU
 ENCOURS
 TERMINE
}

enum ContinentsList {
 AFRIQUE
 AMERIQUE
 ASIE
 EUROPE
 OCEANIE
}

enum AssetTypesList {
  INDEX
  EQUITY
  BOND
}

enum YCTypesList {
  L
  H
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  username String @unique
  status UserStatuses @default(INACTIF)
  role UserRoles @default(VISITOR)
  countryId Int?
  country Country? @relation(fields: [countryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")

}

model Country{
  id Int @id @default(autoincrement())
  name String @unique
  continent ContinentsList  @default(AFRIQUE)
  users User[] 
  gos Go[]
  yieldcurve YieldCurve[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("countries")
}




model Company{
  id Int @id @default(autoincrement())
  name String @unique
  description String
  //users User[] 


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}


model Person{
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  mobile String
  email String @unique


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("persons")
}


model Contact{
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  email String
  message String 
  comments String? 
  status ContactStatuses @default(NOUVEAU) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}



model Go{
  id Int @id @default(autoincrement())
  order Int @default(0)
  key String 
  value String 
  countryId Int?
  country Country? @relation(fields: [countryId], references: [id])
  //@@unique([order, countryId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gos")
}

model YieldCurve{
  id Int @id @default(autoincrement())
  tenor Int
  yield Float
  change Float @default(0)
  //date DateTime @default(now()) @db.Date
  date String
  continent ContinentsList?
  countryId Int?
  country Country? @relation(fields: [countryId], references: [id])
  type YCTypesList @default(H)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenor, date, countryId, continent])

  @@map("yieldcurve")
}


model StaticInfoAction{
  id Int @id @default(autoincrement())
  assetName String
  isin String @unique()
  assetType AssetTypesList

  @@map("staticinfoaction")
}